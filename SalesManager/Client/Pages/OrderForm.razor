@page "/order"
@page "/order/{id}"
@using SalesManager.Client.Services.OrderService;
@using SalesManager.Shared.Entities;

@inject IOrderService OrderService;
@inject NavigationManager NavigationManager;

<div class="row row-cols-2 mb-4">
    <div class="col text-start">
        @if (Id is null)
        {
            <h3>Create Order</h3>
        }
        else
        {
            <h3>Edit Order</h3>
        }
    </div>
</div>

<EditForm Model="@Order" OnValidSubmit="(() => HandleSubmit())">
    <ObjectGraphDataAnnotationsValidator />
    
    <div class="card mb-3">
        <div class="card-body">
            <div class="mb-3">
                <label>Order Name</label>
                <InputText @bind-Value="Order.Name" class="form-control" />
                <ValidationMessage For="@(() => Order.Name)" />
            </div>

            <div class="mb-3">
                <label>State</label>
                <InputSelect id="state" @bind-Value="Order.State" class="form-control">
                    <option value="@string.Empty">Select</option>
                    @foreach (var state in States)
                    {
                        <option value="@state">@state</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Order.State)" />
            </div>

            @foreach (var window in Order.Windows)
            {
                <WindowForm Order="Order" Window="window" OnRemoveClicked="RemoveWindow"></WindowForm>
            }
        </div>

        <div class="card-footer text-end">
            <a class="btn btn-link" href="javascript:void(0)" @onclick="AddWindow">+ Add More Window</a>
        </div>
    </div>

    <div class="mb-3">
        <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>

</EditForm>

@code {
    [Parameter]
    public string? Id { get; set; }

    private Order Order { get; set; } = new();

    private List<string> States = new List<string>
    {
        "AL",
        "AK",
        "AZ",
        "CA",
        "NY"
    };

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            Order = await OrderService.GetOrderAsync(Id)
                ?? new Order();
        }

        if (Order.Windows.Count == 0)
        {
            AddWindow();
        }
    }

    private void AddWindow()
    {
        Order.Windows.Add(new Window
        {
            Id = Guid.NewGuid(),
            SubElements = new List<Element> { 
                new Element
                {
                    Id = Guid.NewGuid()
                }
            }
        });
    }

    private void RemoveWindow(Window window)
    {
        Order.Windows.Remove(window);
    }

    private async Task HandleSubmit()
    {
        bool isSuccess = false;

        if (string.IsNullOrWhiteSpace(Id))
        {
            isSuccess = await OrderService.CreateOrderAsync(Order);
        } 
        else
        {
            isSuccess = await OrderService.UpdateOrderAsync(Id, Order);
        }

        if (isSuccess)
        {
            NavigationManager.NavigateTo($"/orders");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/orders");
    }
}
